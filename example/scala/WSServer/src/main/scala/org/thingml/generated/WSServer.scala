/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated
import org.thingml.generated._
import org.sintef.smac._
import scala.annotation.elidable
import scala.annotation.elidable._
import org.thingml.utils.comm.SerializableTypes._
object Logger {
@elidable(MINIMUM)def debug(s : String) {println("DEBUG:" + s)}
@elidable(INFO)def info(s : String) {println("INFO:" + s)}
@elidable(WARNING)def warning(s : String) {println("WARNING:" + s)}
@elidable(SEVERE)def error(s : String) {println("ERROR:" + s)}
@elidable(MAXIMUM)def severe(s : String) {println("KERNEL PANIC:" + s)}
}
// Definition of Enumeration  WS_ERR
object WS_ERR_ENUM extends Enumeration {
	type WS_ERR_ENUM = Byte
val WS_ERR_CONNECTION_REFUSED : Byte = 0
}
// Definition of Enumeration  DigitalState
object DigitalState_ENUM extends Enumeration {
	type DigitalState_ENUM = Byte
val DIGITALSTATE_LOW : Byte = 0
val DIGITALSTATE_HIGH : Byte = 1
}
object Timer_timeout{ def getName = "timer_timeout" }
case class Timer_timeout(override val name : String = Timer_timeout.getName) extends Event(name)/* with java.io.Serializable*/
object Stop{ def getName = "stop" }
case class Stop(override val name : String = Stop.getName) extends Event(name)/* with java.io.Serializable*/
object Server_launched{ def getName = "server_launched" }
case class Server_launched(override val name : String = Server_launched.getName) extends Event(name)/* with java.io.Serializable*/
object Timer_cancel{ def getName = "timer_cancel" }
case class Timer_cancel(override val name : String = Timer_cancel.getName) extends Event(name)/* with java.io.Serializable*/
object Stop_server{ def getName = "stop_server" }
case class Stop_server(override val name : String = Stop_server.getName) extends Event(name)/* with java.io.Serializable*/
object OnClose{ def getName = "onClose" }
case class OnClose(override val name : String = OnClose.getName) extends Event(name)/* with java.io.Serializable*/
object Send{ def getName = "send" }
case class Send(msg : String, override val name : String = Send.getName) extends Event(name)/* with java.io.Serializable*/
object Start_client{ def getName = "start_client" }
case class Start_client(override val name : String = Start_client.getName) extends Event(name)/* with java.io.Serializable*/
object Timer_start{ def getName = "timer_start" }
case class Timer_start(delay : Short, override val name : String = Timer_start.getName) extends Event(name)/* with java.io.Serializable*/
object Client_launched{ def getName = "client_launched" }
case class Client_launched(override val name : String = Client_launched.getName) extends Event(name)/* with java.io.Serializable*/
object OnOpen{ def getName = "onOpen" }
case class OnOpen(override val name : String = OnOpen.getName) extends Event(name)/* with java.io.Serializable*/
object Start{ def getName = "start" }
case class Start(override val name : String = Start.getName) extends Event(name)/* with java.io.Serializable*/
object Stop_client{ def getName = "stop_client" }
case class Stop_client(override val name : String = Stop_client.getName) extends Event(name)/* with java.io.Serializable*/
object OnError{ def getName = "onError" }
case class OnError(errorMsg : String, override val name : String = OnError.getName) extends Event(name)/* with java.io.Serializable*/
object OnMessage{ def getName = "onMessage" }
case class OnMessage(msg : String, override val name : String = OnMessage.getName) extends Event(name)/* with java.io.Serializable*/
object Start_server{ def getName = "start_server" }
case class Start_server(override val name : String = Start_server.getName) extends Event(name)/* with java.io.Serializable*/

/**
 * Definitions for type : WebSocketServerScala
 **/
class WebSocketServerScala(private var _WebSocketServerScala_server_var : org.thingml.utils.WSServer, val WebSocket__port_var : String) extends Component with org.thingml.utils.WSServerObserver{

//Synchronized accessors of server:org.thingml.utils.WSServer
def WebSocketServerScala_server_var:org.thingml.utils.WSServer = {synchronized{return _WebSocketServerScala_server_var}}
def WebSocketServerScala_server_var_=(newValue : org.thingml.utils.WSServer) { synchronized{ _WebSocketServerScala_server_var = newValue}}

//Companion object
object WebSocketServerScala{
object messaging_int_sendPort{
def getName = "messaging_int_send"
object in {
}
object out {
val send_o = Send.getName
}
}

object messaging_int_recPort{
def getName = "messaging_int_rec"
object in {
val send_i = Send.getName
}
object out {
}
}

object lifecyclePort{
def getName = "lifecycle"
object in {
val start_i = Start.getName
val stop_i = Stop.getName
val start_client_i = Start_client.getName
val start_server_i = Start_server.getName
val stop_client_i = Stop_client.getName
val stop_server_i = Stop_server.getName
}
object out {
val onOpen_o = OnOpen.getName
val onClose_o = OnClose.getName
val server_launched_o = Server_launched.getName
val client_launched_o = Client_launched.getName
}
}

object errPort{
def getName = "err"
object in {
}
object out {
val onError_o = OnError.getName
}
}

object messagingPort{
def getName = "messaging"
object in {
val send_i = Send.getName
}
object out {
val onMessage_o = OnMessage.getName
}
}

}

new Port(WebSocketServerScala.messaging_int_sendPort.getName, List(), List(WebSocketServerScala.messaging_int_sendPort.out.send_o), this).start
new Port(WebSocketServerScala.messaging_int_recPort.getName, List(WebSocketServerScala.messaging_int_recPort.in.send_i), List(), this).start
new Port(WebSocketServerScala.lifecyclePort.getName, List(WebSocketServerScala.lifecyclePort.in.start_i, WebSocketServerScala.lifecyclePort.in.stop_i, WebSocketServerScala.lifecyclePort.in.start_client_i, WebSocketServerScala.lifecyclePort.in.start_server_i, WebSocketServerScala.lifecyclePort.in.stop_client_i, WebSocketServerScala.lifecyclePort.in.stop_server_i), List(WebSocketServerScala.lifecyclePort.out.onOpen_o, WebSocketServerScala.lifecyclePort.out.onClose_o, WebSocketServerScala.lifecyclePort.out.server_launched_o, WebSocketServerScala.lifecyclePort.out.client_launched_o), this).start
new Port(WebSocketServerScala.errPort.getName, List(), List(WebSocketServerScala.errPort.out.onError_o), this).start
new Port(WebSocketServerScala.messagingPort.getName, List(WebSocketServerScala.messagingPort.in.send_i), List(WebSocketServerScala.messagingPort.out.onMessage_o), this).start
override def onOpen() : Unit = {
Logger.debug("Executing onOpen ...")
val handler = this
handler.getPort("lifecycle") match{
case Some(p) => p.send(new OnOpen())
case None => Logger.warning("no port lifecycle You may consider revising your ThingML model. Or contact the development team if you think it is a bug.")
}
}
override def onClose() : Unit = {
Logger.debug("Executing onClose ...")
val handler = this
handler.getPort("lifecycle") match{
case Some(p) => p.send(new OnClose())
case None => Logger.warning("no port lifecycle You may consider revising your ThingML model. Or contact the development team if you think it is a bug.")
}
}
override def onError(WebSocketServerScala_onError_msg_var : String) : Unit = {
Logger.debug("Executing onError ...")
val handler = this
handler.getPort("err") match{
case Some(p) => p.send(new OnError(WebSocketServerScala_onError_msg_var))
case None => Logger.warning("no port err You may consider revising your ThingML model. Or contact the development team if you think it is a bug.")
}
}
override def onMessage(WebSocketServerScala_onMessage_msg_var : String) : Unit = {
Logger.debug("Executing onMessage ...")
val handler = this
handler.getPort("messaging_int_send") match{
case Some(p) => p.send(new Send(WebSocketServerScala_onMessage_msg_var))
case None => Logger.warning("no port messaging_int_send You may consider revising your ThingML model. Or contact the development team if you think it is a bug.")
}
handler.getPort("messaging") match{
case Some(p) => p.send(new OnMessage(WebSocketServerScala_onMessage_msg_var))
case None => Logger.warning("no port messaging You may consider revising your ThingML model. Or contact the development team if you think it is a bug.")
}
}
this.behavior ++= List(new BehaviorStateMachine(false, this).getBehavior)
case class BehaviorStateMachine(keepHistory : Boolean, root : Component) extends StateAction {
override def getBehavior = parent
val parent : StateMachine = new StateMachine(this, keepHistory, root)
override def onEntry() = {
Logger.debug("behavior.onEntry")
//No entry action defined for this state
}

override def onExit() = {
Logger.debug("behavior.onExit")
//No exit action defined for this state
}

//create sub-states
private val _Init_state = InitState()
val Init_state = new State(_Init_state, root)
_Init_state.init
parent.addSubState(Init_state)
case class InitState extends StateAction {
override def onEntry() = {
Logger.debug("Init.onEntry")
org.java_websocket.WebSocketImpl.DEBUG = true;
Logger.info((("\tPORT: " + WebSocket__port_var)).toString)
WebSocketServerScala_server_var = (new org.thingml.utils.WSServer(WebSocket__port_var, root.asInstanceOf[org.thingml.utils.WSServerObserver])).asInstanceOf[org.thingml.utils.WSServer]
}

override def onExit() = {
Logger.debug("Init.onExit")
//No exit action defined for this state
}

def init {
}

}

private val _Started_state = StartedState()
val Started_state = new State(_Started_state, root)
_Started_state.init
parent.addSubState(Started_state)
case class StartedState extends StateAction {
override def onEntry() = {
Logger.debug("Started.onEntry")
WebSocketServerScala_server_var.start();
}

override def onExit() = {
Logger.debug("Started.onExit")
//No exit action defined for this state
}

def init {
new InternalTransition(getBehavior, new InternalTransition_Started_1732364(), List((WebSocketServerScala.messaging_int_recPort.getName, WebSocketServerScala.messaging_int_recPort.in.send_i)))
}

case class InternalTransition_Started_1732364 extends InternalTransitionAction {
override def executeActions() = {
Logger.debug("t_self_Started_1732364.executeActions")
WebSocketServerScala_server_var.send(getEvent(WebSocketServerScala.messaging_int_recPort.in.send_i, WebSocketServerScala.messaging_int_recPort.getName).get.asInstanceOf[Send].msg);
}

}
}

private val _Stopped_state = StoppedState()
val Stopped_state = new State(_Stopped_state, root)
_Stopped_state.init
parent.addSubState(Stopped_state)
case class StoppedState extends StateAction {
override def onEntry() = {
Logger.debug("Stopped.onEntry")
WebSocketServerScala_server_var.stop();
}

override def onExit() = {
Logger.debug("Stopped.onExit")
//No exit action defined for this state
}

def init {
}

}

parent.setInitial(Init_state)

//create transitions among sub-states
val t_Init2Started_18497508 = new Transition(Init_state, Started_state, new TransitionInit2Started_18497508(), List())
parent.addTransition(t_Init2Started_18497508)
val t_Started2Stopped_19051830 = new Transition(Started_state, Stopped_state, new TransitionStarted2Stopped_19051830(), List((WebSocketServerScala.lifecyclePort.getName, WebSocketServerScala.lifecyclePort.in.stop_i)))
parent.addTransition(t_Started2Stopped_19051830)
val t_Stopped2Started_30806859 = new Transition(Stopped_state, Started_state, new TransitionStopped2Started_30806859(), List((WebSocketServerScala.lifecyclePort.getName, WebSocketServerScala.lifecyclePort.in.start_i)))
parent.addTransition(t_Stopped2Started_30806859)
case class TransitionInit2Started_18497508 extends TransitionAction {
override def executeActions() = {
Logger.debug("t_Init2Started_18497508.executeActions")
//No action defined for this transition
}

}
case class TransitionStarted2Stopped_19051830 extends TransitionAction {
override def executeActions() = {
Logger.debug("t_Started2Stopped_19051830.executeActions")
//No action defined for this transition
}

}
case class TransitionStopped2Started_30806859 extends TransitionAction {
override def executeActions() = {
Logger.debug("t_Stopped2Started_30806859.executeActions")
//No action defined for this transition
}

}
}
}

// Initialize instance variables and states

